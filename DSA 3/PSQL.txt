PSQL

-----------cREARTING DB----------

CREATE DATABASE test2;

-----------cREATING tABLE---------

CREATE TABLE employee(
id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  email VARCHAR(50) NOT NULL UNIQUE,
  dob DATE,
  gender VARCHAR(10)
  )

-----------INSERTING VALUE------------



INSERT INTO employee(name,email,dob)
VALUES('Mahi','msd@gmail.com',date '2007-07-07');




-------------DISPLAYING----------------




SELECT * FROM employee ORDER BY name ASC;   /DESC

 id |  name  |            email            |    dob
----+--------+-----------------------------+------------
  2 | Hitman | ajith2001mohith22@gmail.com | 2005-08-10
  3 | Mahi   | msd@gmail.com               | 2007-07-07
  1 | Mohit  | ajith2001mohith@gmail.com   | 2001-08-19




test1=# SELECT DISTINCT dob FROM employee;


SELECT * FROM employee WHERE gender='male' AND dob='2001-08-19';


SELECT * FROM employee WHERE gender='male' AND dob>'2005-08-19';



 SELECT * FROM employee limit 2;


 SELECT * FROM employee WHERE place IN('Kochi','Chennai');



SELECT * FROM employee OFFSET 1;


SELECT * FROM employee WHERE dob BETWEEN DATE '2000-01-01' AND '2005-01-01';

SELECT * FROM employee WHERE name LIKE '%a';

SELECT * FROM employee WHERE name LIKE 'M%';

SELECT * FROM employee WHERE name iLIKE '%a';(cASE SENSITIVE)




----------------ALTER-----------------------


 ALTER TABLE employee ADD COLUMN gender VARCHAR(10);



---------------UPDATE-----------------------


 UPDATE employee SET gender ='male' WHERE name = 'Mohit';


 UPDATE employee SET email='mahi@gmail.com' WHERE name='Mahi';



----------------AGGREGATE---------------------


 SELECT place FROM employee GROUP BY place;


SELECT place,COUNT(*) FROM employee GROUP BY place;


SELECT place,COUNT(*) FROM employee GROUP BY place ORDER by place;


///////Cant use WHERE with aggregate functions. So use HAVING


SELECT place,COUNT(*) FROM employee GROUP BY place HAVING COUNT(*)>1 ORDER by place;
  place   | count
----------+-------
 Banglore |     2
 kochi    |     2

SELECT max(salary) FROM employee;

SELECT min(salary) FROM employee;

SELECT AVG(salary) FROM employee;

SELECT ROUND(AVG(salary)) FROM employee;

SELECT SUM(salary) FROM employee;


 SELECT id,name,score,total,((score::FLOAT/total)*100) AS percentage FROM employee; ////ALIAS

/////COALESCE  SELECT name,id,gender,COALESCE(email,'Not Found') FROM employee;




-----------------TIMESTAMP---------------


 SELECT NOW();
               now
----------------------------------
 2024-09-04 10:19:47.128112+05:30
(1 row)


 SELECT NOW()::DATE;
    now
------------
 2024-09-04
(1 row)


 SELECT NOW()::TIME;
       now
-----------------
 10:20:11.161562
(1 row)


SELECT EXTRACT (YEAR FROM NOW());

test1=# SELECT NOW() + INTERVAL '10 YEARS';
             ?column?
----------------------------------
 2034-09-04 10:32:50.461525+05:30
(1 row)


test1=# SELECT NOW() + INTERVAL '10 MINUTES';
             ?column?
----------------------------------
 2024-09-04 10:43:05.323699+05:30
(1 row)


test1=# SELECT NOW() + INTERVAL '10 SECONDS';
             ?column?
----------------------------------
 2024-09-04 10:33:22.923267+05:30
(1 row)


test1=# SELECT NOW() + INTERVAL '10 HOUR';
             ?column?
----------------------------------
 2024-09-04 20:33:20.619722+05:30




-------------------CONSTRAINTS----------------

>>> NOT NULL
>>> UNIQUE
>>> PRIMARY KEY (ALSO UNIQUE AND NOT NULL)
>>> FOREIGN KEY



